version: 2.1

aliases:
  - &circleci_node
    - image: circleci/node:16

  - &save_node_modules_cache
    name: Save node_modules cache
    paths:
      - node_modules
      - packages/*/node_modules
    key: yarn-deps-{{ checksum "combined-package-lock.txt" }}-{{ checksum ".circleci/config.yml" }}

  - &restore_node_modules_cache
    name: Restore node_modules cache
    key: yarn-deps-{{ checksum "combined-package-lock.txt" }}-{{ checksum ".circleci/config.yml" }}

  - &save_yarn_cache
    name: Save yarnpkg cache
    paths:
      - ~/.cache/yarn
      - ~/.npmrc
    key: yarn-cache-{{ checksum ".circleci/config.yml" }}

  - &restore_yarn_cache
    name: Restore yarnpkg cache
    key: yarn-cache-{{ checksum ".circleci/config.yml" }}

  - &current_workspace
    attach_workspace: { at: "." }

  - &context
    context: front-hub

commands:
  configure_npm_to_use_jfrog:
      description: "Configure npm cli to use jfrog to fetch @resultadosdigitais scoped packages"
      steps:
        - run: 
            name: Write a ~/.npmrc with @resultadosdigitais jFrog Auth
            command: |
              curl -u${JFROG_USERNAME}:${JFROG_PASSWORD} ${JFROG_NPM_REPOSITORY}/auth/resultadosdigitais > ~/.npmrc
        - run:
            name: "Set jFrog auth"
            command: |
              export NPM_TOKEN=$(cat .npmrc | cut -f 2 -d = | sed -n 2p)
              npm config set ${JFROG_NPM_REPOSITORY}:_auth $NPM_TOKEN
        - run:
            name: "Copy ~/.npmrc to <RootProject>/.npmrc"
            command: cp ~/.npmrc .npmrc

  create_concatenated_package_lock:
    description: "Concatenate all package-lock.json files recognized by lerna.js into single file. File is used as checksum source for part of caching key."
    parameters:
      filename:
        type: string
    steps:
      - run:
          name: Combine package-lock.json files to single file
          command: ls yarn.lock ./packages/*/yarn.lock | xargs cat >> << parameters.filename >>
jobs:
  install:
    docker: *circleci_node
    steps:
      - checkout
      - restore_cache: *restore_yarn_cache
      - create_concatenated_package_lock:
          filename: combined-package-lock.txt
      - restore_cache: *restore_node_modules_cache
      - run: ./ci/verify-package-lock.sh
      - run: ./ci/verify-duplicates.sh
      - configure_npm_to_use_jfrog
      - run: 
          name: Install monorepo ROOT packages
          command: yarn install --cache-folder ~/.cache/yarn
      - run:
          name: Check if all yarn.lock are in sync with declared dependencies
          command: ./ci/verify-sync-lock.sh
      - save_cache: *save_node_modules_cache
      - save_cache: *save_yarn_cache
      - persist_to_workspace:
          root: "."
          paths:
            - "packages/*"
            - "node_modules/*"
            - "package.json"
            - "lerna.json"
            - ".npmrc"

  lint:
    docker: *circleci_node
    steps:
      - *current_workspace
      - run: yarn lerna run lint

  g11n_lint_test:
    docker: *circleci_node
    steps:
      - *current_workspace
      - run:
          name: Run Lint
          command: echo "ðŸŒŽ Lint de G11nã€˜oraculo.rdstation.com.br/times/wanderlust/bibliotecas-e-frameworks/lintã€™" && yarn lerna run lint:g11n

  build:
    docker: *circleci_node
    steps:
      - *current_workspace
      - run: yarn lerna run build:prod
      - persist_to_workspace:
          root: "."
          paths: 
            - "packages/*/build"

  test:
    docker: *circleci_node
    steps:
      - *current_workspace
      - run: yarn lerna run test:ci
      - store_test_results:
          path: "~/project/test-results/"
      - store_artifacts:
          path: "~/project/coverage-results"

workflows:
  version: 2
  CI:
    jobs:
      - install:
          <<: *context
      - lint:
          <<: *context
          requires:
            - install
      - g11n_lint_test:
          <<: *context
          requires:
            - install
      - build:
          <<: *context
          requires:
            - install
      - test:
          <<: *context
          requires:
            - build
            - lint
            - g11n_lint_test
